/* Copyright (C) 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
apply plugin: 'com.android.library'
apply plugin: 'maven'

group "com.google.signin"

if (project.hasProperty("pluginVersion")) {
  project.version = project.pluginVersion
} else {
  project.version '0-SNAPSHOT'
}

if (project.hasProperty("uploadDir")) {
  project.ext.uploadDir = project.uploadDir
} else {
  project.ext.uploadDir = "${buildDir}/m2repository"
}

project.ext.baseName = "google-signin-support"

android {
    compileSdkVersion 26
    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 26
        versionName project.version
        archivesBaseName = project.ext.baseName
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++11", "-Wall"
            }
        }
        ndk {
            abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
        }
    }
    lintOptions {
        abortOnError (project.hasProperty("lintAbortOnError") &&
                      (project.lintAbortOnError == "" ||
                       project.lintAbortOnError.toBoolean()))
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt')
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
}

// Rename the .aar file to be .srcaar to work around
// having the local repo in a subdirectory in a Unity project.
// The jar resolver plugin handles the changing back from .srcaar
// to .aar
//
// This is done in 2 parts, first declare the .srcaar as an
// artifact, the second is a task to rename the aar -> srcaar.

artifacts {
    archives file("build/${baseName}-${version}.srcaar")
}

task renameLibrary() {
  doFirst {
    copy {
      from "${buildDir}/outputs/aar/${baseName}-release.aar"
     into "${buildDir}"
      rename {
        String fn ->
          return fn.replace("release.aar", "${version}.srcaar")
      }
    }
  }

  doLast {
    configurations.archives.with   {
         artifacts.remove artifacts.find { it.extension == "aar"}
      }
  }
}

uploadArchives {
  dependsOn renameLibrary
  repositories {
    mavenDeployer {
      repository(url: uri(project.ext.uploadDir))

      // Remove the dependencies from the pom file to simplify the
      // the resolution process.
      pom.whenConfigured {
        p -> p.dependencies = []
      }
    }
  }
}

dependencies {
        api "com.google.android.gms:play-services-auth:19.2.0"
}
